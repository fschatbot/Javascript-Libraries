"use strict";const Timer=class{defaultonfinish=()=>console.log("Times Up");constructor(onfinish,millisecounds=1e3){if(!Number.isInteger(millisecounds)||millisecounds<=0)throw new Error("Sorry, but you have to pass in a integer for millisecounds");if(onfinish&&"[object Function]"!={}.toString.call(onfinish))throw new Error("Sorry, but you have to pass in a function for onfinish");this.millisecounds=millisecounds,this.onfinish=onfinish||this.defaultonfinish,this.timeout=setTimeout(this.onfinish,millisecounds),this.finishon=new Date((new Date).getTime()+millisecounds)}time_remaning(){return this.finishon-new Date}cancel_timer(){clearTimeout(this.timeout)}},Timer_loop=class{constructor(loop_function,loop_time=1e3){if(!Number.isInteger(loop_time)||loop_time<=0)throw new Error("Sorry, but you have to pass in a integer for loop_time");if(!loop_function||"[object Function]"!={}.toString.call(loop_function))throw new Error("Sorry, but you have to pass in a function for loop_function");this.loop_time=loop_time,this.loop_function=loop_function,this.counter=0,this.nextrunon=new Date((new Date).getTime()+this.loop_time),this.loop=setInterval((()=>{this.counter++,this.nextrunon=new Date((new Date).getTime()+this.loop_time),this.loop_function(this.counter)}),this.loop_time)}next_run(){return this.nextrunon-new Date}cancel_loop(){this.nextrunon=null,clearInterval(this.loop)}};